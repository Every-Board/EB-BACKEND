name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  S3_BUCKET_NAME: backendcontentimage
  PROPERTIES_PATH: ./src/main/resources/application.properties

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    # 운영 체제 문제로 '~/gradlew' is not executable. 에러 발생대비 
    - name: Add permission
      run: chmod +x gradlew
    
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
        
    # properties secret 설정
    - name: Set application.properties
      run: |
        touch ${{ env.PROPERTIES_PATH }}
        echo "
        spring.datasource.url=${{ secrets.RDS_ENDPOINT }}
        spring.datasource.username=${{ secrets.RDS_MYSQL_ADMIN_ID }}
        spring.datasource.password=${{ secrets.RDS_MYSQL_ADMIN_PW }}
        jwt.secret-key=${{ secrets.JWT_SECRET_KEY }}
        spring.redis.password=${{ secrets.REDIS_PASSWORD }}
        # spring.security.oauth2.client.registration.google.clientId=${{ secrets.GOOGLE_CLIENT_ID }}
        # spring.security.oauth2.client.registration.google.clientSecret=${{ secrets.GOOGLE_SECRET }}
        # spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}
        # spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_SECRET }}
        spring.mail.username=${{ secrets.MAIL_USERNAME }}
        spring.mail.password=${{ secrets.MAIL_PASSWORD }}
        cloud.aws.credentials.access-key=${{ secrets.S3_ACCESS_KEY }}
        cloud.aws.credentials.secret-key=${{ secrets.S3_SECRET_KEY }}
        cloud.aws.s3.bucket=${{ secrets.S3_BUCKET }}
        config.domain=${{ secrets.DOMAIN }}
        " >> ${{ env.PROPERTIES_PATH }}

    # 빌드
    - name: Build with Gradle
      run: ./gradlew clean build        
        
    # build한 후 프로젝트를 압축합니다.
    - name: Make zip file
      run: zip -r ./practice-deploy.zip .
      shell: bash
      
     # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
     # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ap-northeast-2

  # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./practice-deploy.zip s3://$S3_BUCKET_NAME/practice-deploy.zip

# CodeDeploy에게 배포 명령을 내립니다.
    - name: Code Deploy
      run: >
        aws deploy create-deployment --application-name every-board-deployment
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name every-board-deployment-group
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=practice-deploy.zip
